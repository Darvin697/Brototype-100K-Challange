veriable
data type------int  - %d
               float - %f
               char - %c

declaration ----> declrian the veriable after int main inside the brace eq.int a,
initialization ----> assiging the value for the veriable by ourseloves like eq. a=10



there are something called an escape character "&d"


operators  - different type of operators


+,-,*,/   ---- mathematical operators

==,<,>,<=,>= ----- relational operators

&&,||,! ---- logical operators

=,+=,-= --- assignment operators

== -- equalto
= -- assign to 



control statements
if(condition){     -----> when it become true then the command inside the brace starts 

}
else
if you have to write the false case then we use else also

checking for checking the condition 

nestedif ---->if we have to check three  condition we used 


switch -- switch is used as like elseif ladder 
           switch checks every cases and comes directly to the case where we write the condition.



1. Arithmetic Operators
These are used for mathematical calculations:

+ (Addition)
- (Subtraction)
* (Multiplication)
/ (Division)
% (Modulus)
2. Relational Operators
These compare two values and return a boolean result (true or false):

== (Equal to)
!= (Not equal to)
> (Greater than)
< (Less than)
>= (Greater than or equal to)
<= (Less than or equal to)
3. Logical Operators
These combine multiple conditions:

&& (Logical AND)
|| (Logical OR)
! (Logical NOT)
4. Bitwise Operators
These perform operations on bits:

& (Bitwise AND)
| (Bitwise OR)
^ (Bitwise XOR)
~ (Bitwise NOT)
<< (Left shift)
>> (Right shift)
5. Assignment Operators
These assign values to variables:

= (Simple assignment)
+= (Add and assign)
-= (Subtract and assign)
*= (Multiply and assign)
/= (Divide and assign)
%= (Modulus and assign)
&= (Bitwise AND and assign)
|= (Bitwise OR and assign)
^= (Bitwise XOR and assign)
<<= (Left shift and assign)
>>= (Right shift and assign)
6. Increment and Decrement Operators
These increase or decrease the value by one:

++ (Increment)
-- (Decrement)
7. Conditional (Ternary) Operator
This is a shorthand for an if-else statement:

? : (Syntax: condition ? expression1 : expression2)
8. Comma Operator
Used to separate multiple expressions:

, (Comma)
9. Sizeof Operator
Returns the size of a data type or variable:

sizeof
10. Pointer Operators
These are used with pointers:

* (Dereference operator)
& (Address-of operator)
11. Member Selection Operators
These are used to access members of structures and unions:

. (Direct member access)
-> (Indirect member access through a pointer)
12. Type Casting Operator
Used to convert one data type to another:

(type) (e.g., (int), (float))



switch statement -----> here we can put a constant as like 1,2,3
                        then its maches with the case number 




preincremint = ++a before increasing the value 
postincriment = a++  after increasing the value 


predecriment 
postdecriment




loops -
    for 
    while
    dowhile

    for repated task


initialization -first
condition      -second
updation       -third  
these are the condition body for the loops




SOARTING   --- Bubble Sort
               selection sort 
               quick sort
               bucket sort 

selection sort 
take a postion and locks it and compire with other and do swapping to other if other values are lesser than the first one then check with this kind to all positions thats how the zeroth popsition becomes the lowest of them after that it locks first position and do this kind of checking               


string
character array is called character array 
%s
initialization - char name[6];
no &  in getting  and \0 in last

we can assingn valuse ----> name[] = "Darvin"


Multi-dimensal array
we can store values in multidimensonal array
declaration - int a[3][3]l;
rows and coloum are in multidimensonal array




Functions
Blocks of codes is called functions 
repated lines of code can be blocked into a group  called function
 there are 4 type of Functions

argument/parameter-----> values we passes with calling the function 
return-value ------> the things that returns after the program or line of code excuated 

main()
is the function that excuites first in a program
we can call other frunctions from inside a function

if sum is a function we can call it with "void sum()"


return type should be spefied before we calling a function
if its dosenot returns anything then we can use void
  if its return a number then sould have to use int sum() 



Types of function 

1.function without argument without return value 
eq-function-type-1.c
we didint provided any argument and also it dose not returrned any thing
if its a void function then you have to declare the function before the main function like "void sum();"

2.function with argument without return value 
eq-function-type-2.c
we provid argument but we didnot getting any return value 
it can be declared in the program before the main function using int void sum(int,int);

3.function with argument with return value 
eq-function-type-2.c
we provide argument we also get return value 
it should be declared before  the main function like int sum(int,int);
and also it gives a return value so we provide type of the returning value to the start of the function so it would like int sum(int num1,int num2);

4.function without argument with return value 
eq-function-4.c
we dose not provide argument but we get return value 
it also should be declared before main function like int sum();
and also it should be in the first 
