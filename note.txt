veriable
data type------int  - %d
               float - %f
               char - %c

declaration ----> declrian the veriable after int main inside the brace eq.int a,
initialization ----> assiging the value for the veriable by ourseloves like eq. a=10



there are something called an escape character "&d"


operators  - different type of operators


+,-,*,/   ---- mathematical operators

==,<,>,<=,>= ----- relational operators

&&,||,! ---- logical operators

=,+=,-= --- assignment operators

== -- equalto
= -- assign to 



control statements
if(condition){     -----> when it become true then the command inside the brace starts 

}
else
if you have to write the false case then we use else also

checking for checking the condition 

nestedif ---->if we have to check three  condition we used 


switch -- switch is used as like elseif ladder 
           switch checks every cases and comes directly to the case where we write the condition.



1. Arithmetic Operators
These are used for mathematical calculations:

+ (Addition)
- (Subtraction)
* (Multiplication)
/ (Division)
% (Modulus)
2. Relational Operators
These compare two values and return a boolean result (true or false):

== (Equal to)
!= (Not equal to)
> (Greater than)
< (Less than)
>= (Greater than or equal to)
<= (Less than or equal to)
3. Logical Operators
These combine multiple conditions:

&& (Logical AND)
|| (Logical OR)
! (Logical NOT)
4. Bitwise Operators
These perform operations on bits:

& (Bitwise AND)
| (Bitwise OR)
^ (Bitwise XOR)
~ (Bitwise NOT)
<< (Left shift)
>> (Right shift)
5. Assignment Operators
These assign values to variables:

= (Simple assignment)
+= (Add and assign)
-= (Subtract and assign)
*= (Multiply and assign)
/= (Divide and assign)
%= (Modulus and assign)
&= (Bitwise AND and assign)
|= (Bitwise OR and assign)
^= (Bitwise XOR and assign)
<<= (Left shift and assign)
>>= (Right shift and assign)
6. Increment and Decrement Operators
These increase or decrease the value by one:

++ (Increment)
-- (Decrement)
7. Conditional (Ternary) Operator
This is a shorthand for an if-else statement:

? : (Syntax: condition ? expression1 : expression2)
8. Comma Operator
Used to separate multiple expressions:

, (Comma)
9. Sizeof Operator
Returns the size of a data type or variable:

sizeof
10. Pointer Operators
These are used with pointers:

* (Dereference operator)
& (Address-of operator)
11. Member Selection Operators
These are used to access members of structures and unions:

. (Direct member access)
-> (Indirect member access through a pointer)
12. Type Casting Operator
Used to convert one data type to another:

(type) (e.g., (int), (float))



switch statement -----> here we can put a constant as like 1,2,3
                        then its maches with the case number 




preincremint = ++a before increasing the value 
postincriment = a++  after increasing the value 


predecriment 
postdecriment




loops -
    for 
    while
    dowhile

    for repated task


initialization -first
condition      -second
updation       -third  
these are the condition body for the loops




SOARTING   --- Bubble Sort
               selection sort 
               quick sort
               bucket sort 

selection sort 
take a postion and locks it and compire with other and do swapping to other if other values are lesser than the first one then check with this kind to all positions thats how the zeroth popsition becomes the lowest of them after that it locks first position and do this kind of checking               


string
character array is called character array 
%s
initialization - char name[6];
no &  in getting  and \0 in last

we can assingn valuse ----> name[] = "Darvin"


Multi-dimensal array
we can store values in multidimensonal array
declaration - int a[3][3]l;
rows and coloum are in multidimensonal array




Functions
Blocks of codes is called functions 
repated lines of code can be blocked into a group  called function
 there are 4 type of Functions

argument/parameter-----> values we passes with calling the function 
return-value ------> the things that returns after the program or line of code excuated 

main()
is the function that excuites first in a program
we can call other frunctions from inside a function

if sum is a function we can call it with "void sum()"


return type should be spefied before we calling a function
if its dosenot returns anything then we can use void
  if its return a number then sould have to use int sum() 



Types of function 

1.function without argument without return value 
eq-function-type-1.c
we didint provided any argument and also it dose not returrned any thing
if its a void function then you have to declare the function before the main function like "void sum();"

2.function with argument without return value 
eq-function-type-2.c
we provid argument but we didnot getting any return value 
it can be declared in the program before the main function using int void sum(int,int);

3.function with argument with return value 
eq-function-type-2.c
we provide argument we also get return value 
it should be declared before  the main function like int sum(int,int);
and also it gives a return value so we provide type of the returning value to the start of the function so it would like int sum(int num1,int num2);

4.function without argument with return value 
eq-function-4.c
we dose not provide argument but we get return value 
it also should be declared before main function like int sum();
and also it should be in the first 


java oops 
class is the base model ---> things that created from class is objects 
propraties things in class - veriables
methords Functions 


Classes and Objects in Object-Oriented Programming

In object-oriented programming (OOP), a class is like a blueprint or template for creating objects. It defines the properties (attributes) and behaviors (methods) that objects of that class will have. An object is an instance of a class, meaning it's a concrete realization of the class's blueprint.   

Key Concepts:

Class:
Defines the structure and behavior of objects.
Contains attributes (variables) and methods (functions).
Acts as a blueprint for creating objects.
Object:
An instance of a class.
Has its own set of values for its attributes.
Can invoke the methods defined in its class.







Instance Variables in Java

Instance variables, also known as member variables or fields, are variables declared within a class. They define the state or characteristics of individual objects created from that class. Each object has its own copy of these variables, allowing them to hold different values.   

Key Points:

Declared within a class: Instance variables are defined inside the class body, typically at the beginning.
Belong to individual objects: Each object created from the class has its own instance of these variables.
Hold unique values: Different objects can have different values for their instance variables.
Accessed using the . operator: To access an instance variable 




STATIC 
A static methord can only access directly a static methord or a static veriable 
has a common memory space consecpt



Constructors
Constructors are special methods in Java that are used to initialize objects. They are automatically called when an object is created using the new keyword.

Key Characteristics of Constructors:
Same name as the class: A constructor must have the same name as the class it belongs to.
No return type: Constructors do not have a return type, not even void.
Automatically called: A constructor is automatically invoked when an object is created using the new keyword.
Can be overloaded: A class can have multiple constructors with different parameters, a concept known as constructor overloading.

objects for a class can be created inside the class it self and can be called inside the main function


this is used  to assign a value of local veriable to a global veriable/instance veriable  if a is local veriable inside a methord  we can use this.a=a;
to assign that a to a global veriable  x in the class

INHERISTANCE

there are three type of inheritance 

single 
multilevel
hirarckial


innheristance - parent class/base class    ---> B extends A 
                childclass/subclass

if two class A and B -----> B ineristance from AB ave a copy of A and also B has its own code 
if we create objects for b in another class we can acess both elements the a and b  



Polymorphism 
is called that one thing is used for different things 
Polymorphism means "many forms", and it occurs when we have many classes that are related to each other by inheritance.

methord overloading 
here using arguments number or argument type a function is used for different use cases

methord overriding 
if two class A and B having same methords void display if and B inherist from A and if we create an object for B in main class then which display comes 
dispaly methord in B only comes display methord in A hides and only B comes its called methord overriding 


super
in methord overriding when we have to call the base class we can use the super keyword in the subclass like  i want to call a function in B called void display i have to use 
suuper.display();
and also i have to call the veriable in base class i can use like super.a;

in constructers when we have argument constructor and defult constructors if we call argument constructor it only works subclass argument constructor and base class default constructor 

if u wanted to call argument constructor of base class we can use super(pass the argument);
before the argument constructor of base class 


package
we can add as many class into a package
and can be called in another file by importing it  and can create objects for the class
eq: the scanner function in java we import an package  called java.utl.scanner


Acess specifiers
public
privite
protected
default

exception
run time errors these errors are make by when running the code

we can handle the exceptions like
try{
}
catch blocks are created here


thread
running multiple process at a time
1.extended thread class
2.implemnted runnable interface







